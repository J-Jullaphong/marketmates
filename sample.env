# Use this file as a template for your .env, edit the values as needed.

# Steps to generate your own SECRET_KEY
# 1. In the terminal, run this command: "python manage.py shell"
# 2. In the Python shell, run this command: "from django.core.management.utils import get_random_secret_key"
# 3. Next, run this command: "print(get_random_secret_key())".
# It will print out your randomly generated secret key, copy that key, and paste it in the SECRET_KEY below.

SECRET_KEY = your-randomly-generated-secret-key

# Set DEBUG to True for development only, and False for production to prevent exposing sensitive information.
DEBUG = True

# Define the list of allowed hosts that can access the application.
# Use a comma-separated list of hostnames, IP addresses, or wildcards (*).
# Example:
#   ALLOWED_HOSTS = example.com, www.example.com, localhost, 127.0.0.1
# In production, this should be set to your domain to prevent security issues.
ALLOWED_HOSTS = *.ku.th, localhost, 127.0.0.1, ::1, testserver,

# Set the timezone for the application.
# Example: "UTC", "Asia/Bangkok", "America/New_York"
TIME_ZONE = Asia/Bangkok

# Database Configuration
# Provide the credentials required to connect to the PostgreSQL database.

# The hostname or IP address of your PostgreSQL database server.
PGHOST = your-database-host

# The name of the PostgreSQL database your application will connect to.
PGDATABASE = your-database-name

# The PostgreSQL username used for authentication.
PGUSER = your-database-username

# The PostgreSQL password used for authentication.
PGPASSWORD = your-database-password

# AWS S3 Storage Configuration
# If using Amazon S3 for static/media file storage, set the following credentials.

# Your AWS Access Key ID for authentication.
AWS_ACCESS_KEY_ID = your-access-key-id

# Your AWS Secret Access Key for authentication.
AWS_SECRET_ACCESS_KEY = your-secret-access-key

# The name of the AWS S3 bucket where files will be stored.
AWS_STORAGE_BUCKET_NAME = your-bucket-name

# The AWS region where your S3 bucket is located (e.g., "us-east-1", "ap-southeast-1").
AWS_S3_REGION_NAME = your-region

# Celery Configuration (Task Queue)
# Defines the URL for the Celery broker, which is Redis in this case.
# Celery uses this to manage task queuing.
CELERY_BROKER_URL = redis://redis:6379/0

# Selenium Remote WebDriver URL
# This is used for running Selenium-based automated browser testing via a remote Chrome instance.
SELENIUM_REMOTE_URL = http://chrome:4444/wd/hub

# Redis Cache Configuration
# Defines URLs for Redis instances used for caching and real-time channels.

# Redis instance used for caching.
REDIS_CACHE_URL = redis://redis:6379/1

# Redis instance used for WebSocket channels.
REDIS_CHANNELS_URL = redis://redis:6379/2

# Production Security Settings

# CSRF Trusted Origins: Define trusted domains for CSRF protection.
# Example: "https://yourdomain.com, https://sub.yourdomain.com"
CSRF_TRUSTED_ORIGINS = https://localhost, https://127.0.0.1, https://::1, https://testserver,

# CSRF Secure Cookies: Ensures CSRF cookies are only sent over HTTPS.
# Recommended for production use to prevent session hijacking.
CSRF_COOKIE_SECURE = True
